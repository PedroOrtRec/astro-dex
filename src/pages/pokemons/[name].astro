---
import type { GetStaticPaths } from "astro";
import { Icon } from "astro-icon/components";

import type { PokemonListResponse } from "@interfaces/pokemon-list.response";
import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@components/shared/Title.astro";

export const getStaticPaths = (async () => {
  const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await res.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name },
    props: { name, url },
  }));

}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout title={`Pokemon - #${id} ${name}`} description={`Info about ${name}`} image={imageSrc}>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <header>
      <!-- <a href="/pokemons/1">Regresar</a> -->
       <button onclick="history.back()" class="text-blue-500">Regresar</button>
       <div class="flex flex-row gap-2">
              <Title>{name}</Title>
      <button id="btn-favorite" data-name={name} data-id={id}>
        <Icon data-empty name="heart-empty" size={50}></Icon>
        <Icon data-fill name="heart-fill" class="hidden" size={50}></Icon>
      </button>
       </div>
    </header>
    <PokemonCard url={url} name={name} isBig/>
    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>

<style define:vars="">
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
    @apply hover:animate-pulse
  }
</style>

<script>

  // document.addEventListener('astro:before-preparation', () => {
  //   console.log('astro:before-preparation')
  // });

import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

  //  document.addEventListener('astro:after-preparation', () => {
  //   console.log('astro:after-preparation')
  // });

  //  document.addEventListener('astro:before-swap', () => {
  //   console.log('astro:before-swap')
  // });

  //  document.addEventListener('astro:after-swap', () => {
  //   console.log('astro:after-swap')
  // });

  //  document.addEventListener('astro:page-load', () => {
  //   console.log('astro:page-load')
  // });

  const handlePageLoad = () => {

    let favoritePokemon: FavoritePokemon[] = JSON.parse(localStorage.getItem('favorites') ?? '[]');

    console.log(favoritePokemon);

    const btnFavorite = document.getElementById("btn-favorite") as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? '';
    const id = btnFavorite.dataset.id ?? '';

    const isFavorite = favoritePokemon.some(fav => fav.name === name);

    const heartEmpty = document.querySelector('[data-empty]') as HTMLElement;
    const heartFill = document.querySelector('[data-fill]') as HTMLElement;

    if (isFavorite) {
      heartEmpty.classList.add("hidden");
      heartFill.classList.remove("hidden");
    }

    const toggleFavorite = () => {

      const isFavorite = favoritePokemon.some(fav => fav.name === name);

      if (isFavorite) {
        favoritePokemon = favoritePokemon.filter(fav => fav.name !== name);
      } else {
        favoritePokemon.push({ name, id: +id });
      }

      localStorage.setItem('favorites', JSON.stringify(favoritePokemon));
    }

    btnFavorite.addEventListener("click", () => {
      heartEmpty.classList.toggle("hidden");
      heartFill.classList.toggle("hidden");
      toggleFavorite();
    })
  }

  document.addEventListener('astro:page-load', handlePageLoad)
</script>
